import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { StarIcon, RepeatClockIcon } from "@chakra-ui/icons";
import { FiPlay } from "react-icons/fi";
import ReactPlayer from "react-player";
import {
  Box,
  Button,
  Flex,
  Heading,
  Modal,
  ModalContent,
  Text,
  useColorModeValue,
} from "@chakra-ui/react";
import { FiX } from "react-icons/fi";

import Genres from "../../components/Genres";
import timeConverter from "../../components/utilities/timeConverter";
import SimilarMovies from "../../components/SimilarMovies";
import Companies from "../../components/Companies";
import Layout from "../../components/Layout";

import moviesApi from "../../api/movies";

export default function MovieDetails() {
  const router = useRouter();
  const movieId = router.query.id;
  const [movieDetails, setMovieDetails] = useState({});
  const [similarMovies, setSimilarMovies] = useState({});
  const [movieVideo, setMovieVideo] = useState({});
  const [isPlayerOpen, setIsPlayerOpen] = useState(false);

  useEffect(() => {
    getMovieDetails();
    getSimilarMovies();
    getMovieVideo();
  }, [movieId]);

  const getMovieDetails = async () => {
    try {
      const response = await moviesApi.getMovieDetails(movieId);
      setMovieDetails(response.data);
    } catch (error) {
      console.log(error);
    }
  };

  const getSimilarMovies = async () => {
    try {
      const response = await moviesApi.getSimilarMovies(movieId);
      setSimilarMovies(response.data);
    } catch (error) {
      console.log(error);
    }
  };

  const getMovieVideo = async () => {
    try {
      const response = await moviesApi.getMovieVideo(movieId);
      setMovieVideo(response.data.results[0]);
    } catch (error) {
      console.log(error);
    }
  };

  const handlePlayerOpen = () => setIsPlayerOpen(!isPlayerOpen);

  return (
    <Layout>
      <Head>
        <title>Movie Details-{movieId} - Movies Matter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex gap={10} direction={{ base: "column", md: "row" }}>
        <Box
          w="300px"
          height="400px"
          pos="relative"
          m={{ base: "auto", md: 0 }}
        >
          <Image
            src={`https://image.tmdb.org/t/p/w500${movieDetails?.poster_path}`}
            alt="movie wrapper"
            objectFit="contain"
            layout="fill"
            priority
          />
        </Box>
        <Box>
          <Heading
            as="h1"
            size="xl"
            lineHeight="1.2"
            maxW="28ch"
            textAlign={{ base: "center", md: "left" }}
          >
            {movieDetails?.title}
          </Heading>
          <Text
            my={5}
            color={useColorModeValue("gray.700", "whiteAlpha.700")}
            textAlign={{ base: "center", md: "left" }}
          >
            {movieDetails?.tagline}
          </Text>
          <Flex gap={4} my={5} justify={{ base: "center", md: "flex-start" }}>
            <Flex align="center" gap={1}>
              <StarIcon />
              <Text>{movieDetails?.vote_average}</Text>
            </Flex>
            <Flex align="center" gap={1}>
              <RepeatClockIcon />
              <Text>{timeConverter(movieDetails?.runtime)}</Text>
            </Flex>
            <Button
              leftIcon={<FiPlay />}
              color="white"
              bg="red.500"
              _hover={{ bg: "red.700" }}
              onClick={handlePlayerOpen}
            >
              Play
            </Button>
          </Flex>
          <Text maxW="100ch" mb={5} textAlign={{ base: "center", md: "left" }}>
            {movieDetails?.overview}
          </Text>
          <Box mb="1.5rem">
            <Companies companies={movieDetails?.production_companies} />
          </Box>
          <Genres genres={movieDetails?.genres} />
        </Box>
      </Flex>
      <SimilarMovies movies={similarMovies} />
      <Flex justify="flex-end" mt="2rem">
        {similarMovies?.total_pages > 1 && (
          <Button
            variant="solid"
            color="white"
            bg="red.500"
            p="1.5rem"
            transition="all 300ms ease"
            _hover={{ bg: "red.700" }}
            onClick={() => router.push(`/similar-movies/${movieId}`)}
          >
            View More...
          </Button>
        )}
      </Flex>
      <Modal isCentered isOpen={isPlayerOpen} size="full">
        <ModalContent>
          <Box
            display="grid"
            placeItems="center"
            bg="blackAlpha.800"
            w="100%"
            h="100vh"
            pos="relative"
            p="1rem"
          >
            <Box
              w="50px"
              h="50px"
              pos="absolute"
              top="2rem"
              fontSize="2rem"
              border="2px solid white"
              borderRadius="50%"
              display="grid"
              placeItems="center"
              cursor="pointer"
              transition="all 300ms ease"
              _hover={{
                bg: "white",
                color: "black",
              }}
              onClick={handlePlayerOpen}
            >
              <FiX />
            </Box>
            <Box
              w="100%"
              maxW="900px"
              h="100%"
              maxH={{ base: "400px", md: "500px" }}
              mt="1rem"
            >
              {movieVideo.key && (
                <ReactPlayer
                  url={`https://www.youtube.com/watch?v=${movieVideo?.key}`}
                  width="100%"
                  height="100%"
                  controls
                />
              )}
            </Box>
          </Box>
        </ModalContent>
      </Modal>
    </Layout>
  );
}
